work-in-progress, unstable/incomplete.

if you really want to use, clone and load or use an advanced package manager like [[https://github.com/progfolio/elpaca][Elpaca]].

* Emacs System Information and Environs
Get information about your Emacs and your system.

Can be used to extract particular bits of information, or to display nice Org-formatted tables of information.

** temp-buffer-displaying interactive functions
For the latter, currently the following functions are defined and can be used as interactive commands which show information in a temp buffer with Org-mode styling:
- ~sysinfo-environs-os-release-info~: show the ~/etc/os-release~ info (on this information and specification, see: [[https://linux.org/docs/man5/os-release.html][OS_RELEASE(5)]])
- ~sysinfo-environs-os-uname-info-display~: show various information that ~uname~ knows about (on ~uname~, see [[https://en.wikipedia.org/wiki/Uname][here]])
- ~sysinfo-environs-os-release-and-uname-display~: show both of the previous 
- ~sysinfo-environs-emacs-self-info-display~: show information about your Emacs (version, toolkit &c.)
- ~sysinfo-environs-full-sys-info-display~: show all the information that Emacs System Information and Environs can display. [currently this is all of the above, plus what very basic system information Emacs knows about your OS]. this is encoded in variable ~sysinfo-environs-dataset-alist~.

Since ~/etc/os-release~ defines a field ~LOGO~ which can be specified with the name of the icon/image for the distro, the function ~sysinfo-environs-sysinfo~ tries to find the appropriate image file (in the best resolution, the ~.svg~ if possible) on your system, and any interactive functions which display system information involving the information from ~/etc/os-release~ will try to display this image in the temp buffer:

[[./screenshots/sysinfo-environs_guix_ex.jpg]]

** ~sysinfo-environs-look-up-field~ and your ~init.el~
For particular pieces of information, you can use the ~sysinfo-environs-look-up-field~ function, either in Elisp or as an interactive command.

When ~sysinfo-environs-look-up-field~ it will ask the user to choose between the datasets in ~sysinfo-environs-dataset-alist~ and then show a list of fields from the dataset and ask the user to choose one of these and then message the value of that field in the message area/echo buffer.

When called in Elisp, ~sysinfo-environs-look-up-field~ can be passed just the dataset, in which case it behaves interactively, as above (just not asking again for the dataset, but still asking the user to choose a field) - and the dataset can be passed by either its name in ~sysinfo-environs-dataset-alist~ (e.g., ~"uname-info"~ or the function itself (e.g., ~(sysinfo-environs-parse-uname-info)~).

Or else  ~sysinfo-environs-look-up-field~ can be passed both dataset and field name, and it will return the value of that field in that dataset:

E.g.,

#+begin_src elisp
(sysinfo-environs-look-up-field "emacs-info" "system-type") ;; =
;; gnu/linux
(sysinfo-environs-look-up-field (sysinfo-environs-emacs-known-sysinfo) "system-type") ;; =
;; gnu/linux
(sysinfo-environs-look-up-field "emacs-self-info" "toolkit") ;; =
;; "Lucid/Athena-toolkit (X toolkit)"
(sysinfo-environs-look-up-field "uname-info" "KERNEL_RELEASE") ;; =
;; "6.13.5"
(sysinfo-environs-look-up-field "os-release-info" "ID") ;; =
;; "guix"
#+end_src

*** Use 1: cross-distro shared ~init.el~ files
This last example is one of the prompting factors for this package: it can be useful to know not only if the current instance of Emacs is running on Linux (rather than, e.g., Windows) but also /which distro/ it's running under. Because you might have a single Emacs ~init.el~ that you use across many systems and want to keep synchronised (say, with [[https://syncthing.net][Syncthing]]) in order to have changes you make to your ~init.el~ propagate across all of your Emacs instances on various machines, but you might some things to work differently on different machines depending on the particulars of the machine. Which in some cases might include which distro Emacs is running under. (In the past I've just used ~(system-name)~ for this and "hard-coded" things by knowing that the computers called "my-guix-laptop" and "old-thinkpad02" are both running on [[https://guix.gnu.org][Guix]].)

There are two very useful values in =/etc/os-release=, and thus accessible by ~sysinfo-environs-look-up-field~, namely ~ID~ and ~ID_LIKE~.

So on a Guix machine, if you call ~(sysinfo-environs-look-up-field "os-release-info" "ID")~, you'll get back ~"guix"~ . If you're running CachyOS, ~(sysinfo-environs-look-up-field "os-release-info" "ID")~ will give you back ~"cachyos"~ and ~(sysinfo-environs-look-up-field "os-release-info" "ID_LIKE")~ will give you back ~"arch"~ - because CachyOS is an [[https://archlinux.org][Arch Linux]] derivative. It might be useful to know the particular variant/derivative you're running Emacs under (e.g., CachyOS), but you might just want to know "is this essentially an Arch machine, whether it's pure Arch or [[https://cachyos.org][CachyOS]] or [[https://endeavouros.com][EndeavourOS]] or [[https://garudalinux.org][Garuda]] &c.?"

If you're going to use it like this, make sure to =require= ~sysinfo-environs~ early in your =init.el= (i.e., before you're going to call on it.)

If you're using a package manager like Elpaca, you'll want to use ~:ensure (:wait t) :demand t~, e.g.:

#+begin_src elisp
(use-package sysinfo-environs
  :ensure (:wait t :host github :repo "emacs-bigtop/sysinfo-environs")
  :demand t
  :config
  (setq this-system-os
        (sysinfo-environs-look-up-field "os-release-info" "ID")))
#+end_src

And so, as in the above config example, you could set a variable which gives you the distro that Emacs is running under, and so you could do something like:

#+begin_src elisp
 (use-package pdf-tools
      :ensure (if (string= this-system-os "guix") nil t)
      :config
      (pdf-tools-install 'no-query))
#+end_src

(This example is for one of my use-cases: I generally want to use Elpaca to manage packages across all of my machines, regardless of which particular OS they're running, but on Guix, I have to use Guix's own packaged version of ~emacs-pdf-tools~ because [[https://pdftools.wiki][PDF Tools]] wants to install other packages and then compile itself and this won't work on Guix, but works on, e.g., Arch. So here I use ~use-package~ to ~require~ PDF Tools, but only try to have Elpaca install PDF Tools itself (rather than relying on the OS to already have installed it) when the machine *isn't* running on Guix.)

Because of the difference between the ~os-release~ ~ID~ and ~ID_LIKE~ values, and the fact that not all distros will set ~ID_LIKE~, you might want to set your "this-system-os" variable (whatever you want to call it) like this:

#+begin_src elisp
(setq this-system-os
      (let ((idlike
             (sysinfo-environs-look-up-field "os-release-info" "ID_LIKE")))
        (if idlike
            idlike
          (sysinfo-environs-look-up-field "os-release-info" "ID"))))
#+end_src

This will set ~this-system-os~ to the value of ~ID_LIKE~ if that is defined, and to the value of ~ID~ otherwise. This means ~this-system-os~  will be ~"guix"~ on your Guix machine and ~"arch"~ on both your vanilla Arch machine and your CachyOS machine.

*** Use 2: encode system details
What if you want to encode some system information in your LaTeX-produced PDF?

There's a number of template/completion packages; I've been using [[https://github.com/minad/tempel][TempEl]], with a ~templates~ file located at =~/.emacs.d/templates=. So something like (but see TempEl's documentation for the config) in your =init.el=:

#+begin_src elisp
(use-package tempel
  :ensure t
  ;; Require trigger prefix before template name when completing.
  ;; :custom        
  ;; (tempel-trigger-prefix "<")    
  
  :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
         ("M-*" . tempel-insert))

  :init
  (setq tempel-path "~/.emacs.d/templates")
  ;; Setup completion at point
  (defun tempel-setup-capf ()
    ;; Add the Tempel Capf to `completion-at-point-functions'.
    ;; `tempel-expand' only triggers on exact matches. Alternatively use
    ;; `tempel-complete' if you want to see all matches, but then you
    ;; should also configure `tempel-trigger-prefix', such that Tempel
    ;; does not trigger too often when you don't expect it. NOTE: We add
    ;; `tempel-expand' *before* the main programming mode Capf, such
    ;; that it will be tried first.
    (setq-local completion-at-point-functions
                (cons #'tempel-expand
                      completion-at-point-functions)))

  (add-hook 'prog-mode-hook 'tempel-setup-capf)
  (add-hook 'text-mode-hook 'tempel-setup-capf)

  ;; Optionally make the Tempel templates available to Abbrev,
  ;; either locally or globally. `expand-abbrev' is bound to C-x '.
  ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
  ;; (global-tempel-abbrev-mode)
  )

;; Optional: Add tempel-collection.
;; The package is young and doesn't have comprehensive coverage.
(use-package tempel-collection
  :ensure t)
#+end_src

And then in my =~/.emacs.d/templates= file:
#+begin_src elisp
....

tex-mode
;; `hyperrefv' is the template shortcut; hit `TAB' key to expand when in tex-mode:
(hyperrefv
 ;; TeX chokes on `_'
 (replace-regexp-in-string
  "_" "ï¼¿"
  ;; TeX doesn't like `#' either
  (replace-regexp-in-string
   "#" "\\\\#"
   ;; use TeX-specified \title and \author, and then set `creator'
   (concat (make-string 1 ?\\) "usepackage[pdfusetitle,pdfcreator={"
           ;; when there's a build-date, format it differently
           ;; (emacs-version) return build-date as " of <DATE>"
           ;; get the string slices for the beginning and end of this:
           (let* ((end-before-of (string-match "of " (emacs-version)))
                  (end-of-of (match-end 0)))
             (list end-before-of end-of-of)
             ;; get rid of the newline from (emacs-version)
             (replace-regexp-in-string
              "\n" ""
              ;; if there is a build-date
              (if end-before-of
                  ;; replace the " of <DATE>"
                  ;; with [built on <DATE>]
                  (concat 
                   (substring (emacs-version) 0 end-before-of)       
                   "[built on "
                   (substring (emacs-version) end-of-of )
                   "]")
                ;; if no build-date (like on Guix), just return the (emacs-version) info
                (emacs-version))))
           " with AUCTeX "
           AUCTeX-version                                        
           " on "
           ;; OS/distro name:
           (sysinfo-environs-look-up-field "os-release-info" "PRETTY_NAME")
           " ("
           ;; kernel name (e.g., "Linux"):
           (sysinfo-environs-look-up-field "uname-info" "KERNEL_NAME")
           " "
           ;; kernel version:
           (sysinfo-environs-look-up-field "uname-info" "KERNEL_RELEASE")
           " ["
           ;; other kernel specs:
           (sysinfo-environs-look-up-field "uname-info" "KERNEL_SPECS")
           ;; called as arguments to TeX package `hyperref':
           "])}]{hyperref}"))))
#+end_src

And then in a LaTeX document, somewhere in the preamble type ~hyperrefv~ and then hit ~TAB~ and it expands into something like:

#+begin_src tex
\usepackage[pdfusetitle,pdfcreator={GNU Emacs 30.1 (build 2, x86ï¼¿64-pc-linux-gnu, GTK+ Version 3.24.48, cairo version 1.18.2) [built on 2025-03-03] with AUCTeX 14.0.9 on CachyOS (Linux 6.13.7-2-cachyos [\#1 SMP PREEMPTï¼¿DYNAMIC Fri, 14 Mar 2025 09:31:47 +0000])}]{hyperref}
#+end_src

Something similar would work with other template/completion packages like [[https://github.com/joaotavora/yasnippet][yasnippet]].

** Other notes
.....
